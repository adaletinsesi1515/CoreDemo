@model EntityLayer.Concrete.Blog

@{
    ViewData["Title"] = "BlogUpdate";
    Layout = "~/Views/Shared/_WriterLayout.cshtml";
}


<div class="col-12 grid-margin stretch-card">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">Blog Kayıt Güncelleme Paneli</h4>
            @using (Html.BeginForm("BlogUpdate", "Blog", FormMethod.Post))
            {
                @Html.HiddenFor(x => x.BlogID, new { @class = "form-control" })
                <br />
                @Html.Label("Blog Başlığı")
                @Html.TextBoxFor(x => x.BlogTitle, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.BlogTitle, "", new { @class = "text-danger" })
                <br />
                @Html.Label("Blog Küçük Resmi")
                @Html.TextBoxFor(x => x.BlogThumbnailImage, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.BlogThumbnailImage, "", new { @class = "text-danger" })
                <br />
                @Html.Label("Blog Görseli")
                @Html.TextBoxFor(x => x.BlogImage, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.BlogImage, "", new { @class = "text-danger" })
                <br />
                @Html.Label("Blog Kategori")
                @Html.DropDownListFor(x => x.CategoryID, (List<SelectListItem>)ViewBag.CategoryList, new { @class = "form-control" })
                <br />
                @Html.Label("Blog İçeriği")
                @Html.TextAreaFor(x => x.BlogContent, 10, 3, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.BlogContent, "", new { @class = "text-danger" })
                <br />
                @Html.Label("Blog Durumu (Aktif/Pasif)")
                @Html.CheckBoxFor(x => x.BlogStatus, new { @class = "form-check" })
                <br />
                <button class="btn btn-success">Güncelle</button>
            }
        </div>

    </div>

</div>
